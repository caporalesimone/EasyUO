const Wearables : array[0..770] of Word = (
0, // 01 (last batch contained 0 items)
10148,
10152,
10154,
10223,
10227,
10229,
11553,
11554,
11555,
11556,
11557,
11559,
11561,
11565,
11566,
11567,
11568,
11569,
11571,
11573,
11600,
3570,
3571,
3572,
3573,
3643,
3717,
3718,
3778,
3779,
3780,
3781,
3834,
3911,
3912,
3919,
3920,
3921,
3922,
3932,
3933,
3934,
3935,
3936,
3937,
4020,
4021,
5039,
5040,
5041,
5042,
5043,
5044,
5045,
5046,
5047,
5048,
5049,
5050,
5091,
5092,
5110,
5111,
5116,
5117,
5118,
5119,
5120,
5121,
5124,
5125,
5126,
5127,
5176,
5177,
5178,
5179,
5180,
5181,
5184,
5185,
526,
8786,
8787,
8788,
9100,
9120,
9559,
9565,
9566,
9567,
9568,
9571,
9583,
9587,
9588,
9589,
9590,
9593,
9596,
9597,
9598,
9599,
9915,
9916,
9920,
9925,
9926,
9930,
9934,
9935,
0, // 02 (last batch contained 111 items)
10146,
10147,
10149,
10150,
10151,
10153,
10155,
10157,
10158,
10159,
10221,
10222,
10224,
10225,
10226,
10228,
10230,
10232,
10233,
10234,
11009,
11550,
11551,
11552,
11558,
11560,
11562,
11563,
11564,
11570,
11572,
2575,
2576,
2577,
2578,
2579,
2580,
2581,
2582,
2583,
2584,
2594,
2595,
2596,
2597,
3519,
3520,
3568,
3569,
3713,
3714,
3719,
3720,
3721,
3722,
3907,
3908,
3909,
3910,
3913,
3914,
3915,
3916,
3917,
3918,
3938,
3939,
3940,
3947,
5108,
5109,
5112,
5113,
5114,
5115,
5122,
5123,
5182,
5183,
5186,
5187,
5703,
7026,
7027,
7028,
7029,
7030,
7031,
7032,
7033,
7034,
7035,
7107,
7108,
7109,
7110,
7111,
9556,
9557,
9558,
9560,
9561,
9562,
9563,
9564,
9569,
9570,
9572,
9573,
9574,
9575,
9576,
9577,
9578,
9579,
9580,
9581,
9582,
9584,
9585,
9586,
9591,
9592,
9594,
9595,
9914,
9917,
9918,
9919,
9921,
9922,
9923,
9924,
9927,
9928,
9929,
9931,
9932,
9933,
0, // 03 (last batch contained 139 items)
10133,
10134,
10135,
10208,
10209,
10210,
11026,
11027,
12228,
12666,
5899,
5900,
5901,
5902,
5903,
5904,
5905,
5906,
8967,
8968,
9811,
9812,
9813,
9814,
9903,
9984,
0, // 04 (last batch contained 26 items)
10118,
10119,
10120,
10122,
10123,
10124,
10125,
10129,
10139,
10193,
10194,
10195,
10197,
10198,
10199,
10200,
10204,
10214,
11014,
11015,
11115,
11128,
12227,
12233,
12234,
12642,
12655,
12665,
12671,
12672,
5054,
5059,
5067,
5074,
5082,
5089,
5104,
5105,
5137,
5146,
5202,
5207,
5422,
5423,
5433,
5434,
7168,
7169,
7176,
7177,
9700,
9701,
9799,
9800,
9801,
9802,
9805,
9806,
9807,
9808,
9809,
9810,
0, // 05 (last batch contained 62 items)
12219,
12220,
12221,
12222,
12661,
12662,
12663,
12664,
5399,
5400,
7933,
7934,
9702,
9703,
9704,
9705,
9706,
9707,
9817,
9818,
9819,
9820,
9821,
9822,
9823,
9824,
9825,
9826,
9827,
9828,
9829,
9830,
9831,
9832,
0, // 06 (last batch contained 34 items)
10100,
10101,
10102,
10103,
10104,
10113,
10116,
10117,
10121,
10126,
10127,
10136,
10175,
10176,
10177,
10178,
10179,
10188,
10191,
10192,
10196,
10201,
10202,
10211,
11024,
11025,
11118,
11119,
11120,
11121,
11122,
11123,
12216,
12645,
12646,
12647,
12648,
12649,
12650,
12658,
5051,
5056,
5128,
5129,
5130,
5131,
5132,
5133,
5134,
5135,
5138,
5145,
5147,
5148,
5201,
5206,
5439,
5440,
5443,
5444,
5445,
5446,
5447,
5448,
5449,
5450,
5451,
5452,
5907,
5908,
5909,
5910,
5911,
5912,
5913,
5914,
5915,
5916,
5934,
7609,
7610,
7947,
7948,
8965,
8966,
9068,
9069,
9797,
9798,
9865,
9866,
9867,
9868,
9869,
9870,
9871,
9872,
9873,
9874,
9885,
9886,
9889,
9890,
9891,
9892,
0, // 07 (last batch contained 105 items)
10130,
10205,
11020,
11021,
11114,
11125,
12230,
12641,
12652,
12668,
5062,
5070,
5077,
5085,
5099,
5106,
5140,
5144,
5200,
5205,
9795,
9796,
9847,
9848,
9849,
9850,
9904,
0, // 08 (last batch contained 27 items)
4234,
7945,
0, // 09 (last batch contained 2 items)
12120,
12121,
12122,
12123,
4246,
0, // 0A (last batch contained 5 items)
10105,
10106,
10141,
10180,
10181,
10216,
11022,
11023,
11113,
11126,
12231,
12640,
12653,
12669,
15285,
4229,
4232,
4233,
5063,
5078,
5139,
7941,
7944,
7946,
9803,
9804,
0, // 0B (last batch contained 26 items)
12223,
12224,
12225,
12226,
12236,
12237,
12238,
12239,
12240,
12241,
12242,
8251,
8252,
8253,
8260,
8261,
8262,
8263,
8264,
8265,
8266,
0, // 0C (last batch contained 21 items)
10128,
10144,
10203,
10219,
11112,
12639,
5435,
5436,
0, // 0D (last batch contained 8 items)
10107,
10108,
10109,
10131,
10132,
10182,
10183,
10184,
10206,
10207,
11016,
11017,
11111,
11117,
11124,
11129,
12229,
12235,
12638,
12644,
12651,
12656,
12667,
12673,
5055,
5060,
5068,
5075,
5083,
5090,
5100,
5101,
5141,
5142,
5199,
5204,
7170,
7171,
7172,
7173,
7174,
7175,
7178,
7179,
7180,
7181,
9793,
9794,
9841,
9842,
9843,
0, // 0E (last batch contained 51 items)
4230,
7942,
0, // 0F (last batch contained 2 items)
0, // 10 (last batch contained 0 items)
8254,
8255,
8256,
8257,
8267,
8268,
8269,
0, // 11 (last batch contained 7 items)
10145,
10220,
5437,
5438,
5441,
5442,
8059,
8060,
8095,
8096,
8097,
8098,
8189,
8190,
8975,
8976,
0, // 12 (last batch contained 16 items)
4231,
7943,
0, // 13 (last batch contained 2 items)
10110,
10111,
10112,
10185,
10186,
10187,
11018,
11019,
11116,
11127,
12232,
12643,
12654,
12670,
5061,
5069,
5076,
5084,
5102,
5103,
5136,
5143,
5198,
5203,
9815,
9816,
9835,
9836,
9837,
9838,
9844,
0, // 14 (last batch contained 31 items)
11010,
11011,
11012,
11013,
12215,
12657,
5397,
5424,
8969,
8970,
9901,
0, // 15 (last batch contained 11 items)
2482,
3701,
0, // 16 (last batch contained 2 items)
10114,
10115,
10137,
10140,
10142,
10143,
10189,
10190,
10212,
10215,
10217,
10218,
12217,
12218,
12659,
12660,
7935,
7936,
7937,
7938,
7939,
7940,
8258,
8259,
8270,
8271,
8272,
8973,
8974,
9708,
9709,
9710,
9711,
9712,
9713,
9851,
9852,
9853,
9854,
9855,
9856,
9857,
9858,
9859,
9860,
9861,
9862,
9863,
9902,
0, // 17 (last batch contained 49 items)
10138,
10213,
5398,
5425,
5431,
5432,
8971,
8972,
9714,
9715,
0 // (last batch contained 10 items)
);

////////////////////////////////////////////////////////////////////////////////

function GetWearableLayer(ItemType : Word) : Cardinal;
var
  i : Integer;
begin
  Result:=0;
  for i:=0 to High(Wearables) do
  begin
    if Wearables[i]=0 then Inc(Result);
    if Wearables[i]=ItemType then Exit;
  end;
  Result:=0;
end;

////////////////////////////////////////////////////////////////////////////////

{procedure FindWearables(UOSel : TCliSel);
var
  i   : Cardinal;
  buf : Array[0..$27] of byte;
  cnt : Integer;
  sl  : TStringList;
  s   : String;
begin
  sl:=TStringList.Create;

  i:=$40BD0020; //Start
  cnt:=0;       //0 = Unused, 1 = NoDraw
  repeat
    RWVar(UOSel.HProc,read,i,@buf,$28);

    if (buf[2] and $40)>0 then //Wearables Flag
    begin
      sl.Add(IntToHex(buf[5],2)+': '+IntToStr(cnt)); // 5 = layer
    end;

    i:=i+$28;
    Inc(cnt);
  until i>=$40C70020; //End

  //Formatting routine:
  sl.Sort;
  s:='';
  cnt:=0;
  i:=0;
  while i<sl.Count do
  begin
    if Copy(sl[i],1,2)<>s then
    begin
      s:=Copy(sl[i],1,2);
      sl.Insert(i,'0, // '+s+' (last batch contained '+IntTostr(Cnt)+' items)');
      Cnt:=0;
    end
    else begin
      sl[i]:=Copy(sl[i],5,99)+',';
      Inc(Cnt);
    end;
    Inc(i);
  end;
  sl.Add('0 // (last batch contained '+IntTostr(Cnt)+' items)');

  // DOES NOT FIX 0 ITEM LAYERS! FIX MANUALLY! (e.g. Layer 0F!)

  sl.SaveToFile('C:\wearables.txt');
  sl.Free;
end;}

////////////////////////////////////////////////////////////////////////////////

//Search for "Alazane" and "wearables" on the Web and you'll find this
//description on UO files: TileData.mul contains information about the artwork
//stored in Art.mul (which contains landscape tiles and static artwork).
//That information looks like this:

//$28 Bytes per Entry:
//--------------------
//DWORD Flags (see below)
//WORD TextureID or Layer (no texture if 0)
//??? - 13 Bytes Fill
//CHAR[20] Tile/Art Name
//ZeroByte

{Flags:
0x00000001 Background
0x00000002 Weapon
0x00000004 Transparent
0x00000008 Translucent
0x00000010 Wall
0x00000020 Damaging
0x00000040 Impassable
0x00000080 Wet
0x00000100 Unknown
0x00000200 Surface
0x00000400 Bridge
0x00000800 Generic/Stackable
0x00001000 Window
0x00002000 No Shoot
0x00004000 Prefix A
0x00008000 Prefix An
0x00010000 Internal (things like hair, beards, etc)
0x00020000 Foliage
0x00040000 Partial Hue
0x00080000 Unknown 1
0x00100000 Map
0x00200000 Container
0x00400000 Wearable          <---
0x00800000 LightSource
0x01000000 Animated
0x02000000 No Diagonal
0x04000000 Unknown 2
0x08000000 Armor
0x10000000 Roof
0x20000000 Door
0x40000000 StairBack
0x80000000 StairRight}

// Simply search for an item name (e.g. as it appears in InsudeUO) in
// memory and you should find a large memory mapped table. Update begin
// and end markers in the code (dynamic memory!).
